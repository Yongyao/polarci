//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace GeoSearch.StatisticsServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="http://schemas.datacontract.org/2004/07/GeoSearch.Web")]
    public partial class ServerInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IPAddressField;
        
        private string LonLatField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LonLat {
            get {
                return this.LonLatField;
            }
            set {
                if ((object.ReferenceEquals(this.LonLatField, value) != true)) {
                    this.LonLatField = value;
                    this.RaisePropertyChanged("LonLat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="cisc.gmu.edu/StatisticsService", ConfigurationName="StatisticsServiceReference.StatisticsService")]
    public interface StatisticsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="cisc.gmu.edu/StatisticsService/StatisticsService/getVisitIPAddress", ReplyAction="cisc.gmu.edu/StatisticsService/StatisticsService/getVisitIPAddressResponse")]
        System.IAsyncResult BegingetVisitIPAddress(System.AsyncCallback callback, object asyncState);
        
        string EndgetVisitIPAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="cisc.gmu.edu/StatisticsService/StatisticsService/getLocationFromIP", ReplyAction="cisc.gmu.edu/StatisticsService/StatisticsService/getLocationFromIPResponse")]
        System.IAsyncResult BegingetLocationFromIP(string ip, System.AsyncCallback callback, object asyncState);
        
        string EndgetLocationFromIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="cisc.gmu.edu/StatisticsService/StatisticsService/getIPFromDNS", ReplyAction="cisc.gmu.edu/StatisticsService/StatisticsService/getIPFromDNSResponse")]
        System.IAsyncResult BegingetIPFromDNS(string domain, System.AsyncCallback callback, object asyncState);
        
        string EndgetIPFromDNS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="cisc.gmu.edu/StatisticsService/StatisticsService/getServerInfoFromURLS", ReplyAction="cisc.gmu.edu/StatisticsService/StatisticsService/getServerInfoFromURLSResponse")]
        System.IAsyncResult BegingetServerInfoFromURLS(System.Collections.ObjectModel.ObservableCollection<string> URLList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> EndgetServerInfoFromURLS(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface StatisticsServiceChannel : GeoSearch.StatisticsServiceReference.StatisticsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getVisitIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getVisitIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLocationFromIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLocationFromIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getIPFromDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getIPFromDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getServerInfoFromURLSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getServerInfoFromURLSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatisticsServiceClient : System.ServiceModel.ClientBase<GeoSearch.StatisticsServiceReference.StatisticsService>, GeoSearch.StatisticsServiceReference.StatisticsService {
        
        private BeginOperationDelegate onBegingetVisitIPAddressDelegate;
        
        private EndOperationDelegate onEndgetVisitIPAddressDelegate;
        
        private System.Threading.SendOrPostCallback ongetVisitIPAddressCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLocationFromIPDelegate;
        
        private EndOperationDelegate onEndgetLocationFromIPDelegate;
        
        private System.Threading.SendOrPostCallback ongetLocationFromIPCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIPFromDNSDelegate;
        
        private EndOperationDelegate onEndgetIPFromDNSDelegate;
        
        private System.Threading.SendOrPostCallback ongetIPFromDNSCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServerInfoFromURLSDelegate;
        
        private EndOperationDelegate onEndgetServerInfoFromURLSDelegate;
        
        private System.Threading.SendOrPostCallback ongetServerInfoFromURLSCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StatisticsServiceClient() {
        }
        
        public StatisticsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StatisticsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatisticsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatisticsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getVisitIPAddressCompletedEventArgs> getVisitIPAddressCompleted;
        
        public event System.EventHandler<getLocationFromIPCompletedEventArgs> getLocationFromIPCompleted;
        
        public event System.EventHandler<getIPFromDNSCompletedEventArgs> getIPFromDNSCompleted;
        
        public event System.EventHandler<getServerInfoFromURLSCompletedEventArgs> getServerInfoFromURLSCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GeoSearch.StatisticsServiceReference.StatisticsService.BegingetVisitIPAddress(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetVisitIPAddress(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GeoSearch.StatisticsServiceReference.StatisticsService.EndgetVisitIPAddress(System.IAsyncResult result) {
            return base.Channel.EndgetVisitIPAddress(result);
        }
        
        private System.IAsyncResult OnBegingetVisitIPAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).BegingetVisitIPAddress(callback, asyncState);
        }
        
        private object[] OnEndgetVisitIPAddress(System.IAsyncResult result) {
            string retVal = ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).EndgetVisitIPAddress(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetVisitIPAddressCompleted(object state) {
            if ((this.getVisitIPAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getVisitIPAddressCompleted(this, new getVisitIPAddressCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getVisitIPAddressAsync() {
            this.getVisitIPAddressAsync(null);
        }
        
        public void getVisitIPAddressAsync(object userState) {
            if ((this.onBegingetVisitIPAddressDelegate == null)) {
                this.onBegingetVisitIPAddressDelegate = new BeginOperationDelegate(this.OnBegingetVisitIPAddress);
            }
            if ((this.onEndgetVisitIPAddressDelegate == null)) {
                this.onEndgetVisitIPAddressDelegate = new EndOperationDelegate(this.OnEndgetVisitIPAddress);
            }
            if ((this.ongetVisitIPAddressCompletedDelegate == null)) {
                this.ongetVisitIPAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetVisitIPAddressCompleted);
            }
            base.InvokeAsync(this.onBegingetVisitIPAddressDelegate, null, this.onEndgetVisitIPAddressDelegate, this.ongetVisitIPAddressCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GeoSearch.StatisticsServiceReference.StatisticsService.BegingetLocationFromIP(string ip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLocationFromIP(ip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GeoSearch.StatisticsServiceReference.StatisticsService.EndgetLocationFromIP(System.IAsyncResult result) {
            return base.Channel.EndgetLocationFromIP(result);
        }
        
        private System.IAsyncResult OnBegingetLocationFromIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ip = ((string)(inValues[0]));
            return ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).BegingetLocationFromIP(ip, callback, asyncState);
        }
        
        private object[] OnEndgetLocationFromIP(System.IAsyncResult result) {
            string retVal = ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).EndgetLocationFromIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLocationFromIPCompleted(object state) {
            if ((this.getLocationFromIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLocationFromIPCompleted(this, new getLocationFromIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLocationFromIPAsync(string ip) {
            this.getLocationFromIPAsync(ip, null);
        }
        
        public void getLocationFromIPAsync(string ip, object userState) {
            if ((this.onBegingetLocationFromIPDelegate == null)) {
                this.onBegingetLocationFromIPDelegate = new BeginOperationDelegate(this.OnBegingetLocationFromIP);
            }
            if ((this.onEndgetLocationFromIPDelegate == null)) {
                this.onEndgetLocationFromIPDelegate = new EndOperationDelegate(this.OnEndgetLocationFromIP);
            }
            if ((this.ongetLocationFromIPCompletedDelegate == null)) {
                this.ongetLocationFromIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLocationFromIPCompleted);
            }
            base.InvokeAsync(this.onBegingetLocationFromIPDelegate, new object[] {
                        ip}, this.onEndgetLocationFromIPDelegate, this.ongetLocationFromIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GeoSearch.StatisticsServiceReference.StatisticsService.BegingetIPFromDNS(string domain, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIPFromDNS(domain, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GeoSearch.StatisticsServiceReference.StatisticsService.EndgetIPFromDNS(System.IAsyncResult result) {
            return base.Channel.EndgetIPFromDNS(result);
        }
        
        private System.IAsyncResult OnBegingetIPFromDNS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domain = ((string)(inValues[0]));
            return ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).BegingetIPFromDNS(domain, callback, asyncState);
        }
        
        private object[] OnEndgetIPFromDNS(System.IAsyncResult result) {
            string retVal = ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).EndgetIPFromDNS(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetIPFromDNSCompleted(object state) {
            if ((this.getIPFromDNSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIPFromDNSCompleted(this, new getIPFromDNSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIPFromDNSAsync(string domain) {
            this.getIPFromDNSAsync(domain, null);
        }
        
        public void getIPFromDNSAsync(string domain, object userState) {
            if ((this.onBegingetIPFromDNSDelegate == null)) {
                this.onBegingetIPFromDNSDelegate = new BeginOperationDelegate(this.OnBegingetIPFromDNS);
            }
            if ((this.onEndgetIPFromDNSDelegate == null)) {
                this.onEndgetIPFromDNSDelegate = new EndOperationDelegate(this.OnEndgetIPFromDNS);
            }
            if ((this.ongetIPFromDNSCompletedDelegate == null)) {
                this.ongetIPFromDNSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIPFromDNSCompleted);
            }
            base.InvokeAsync(this.onBegingetIPFromDNSDelegate, new object[] {
                        domain}, this.onEndgetIPFromDNSDelegate, this.ongetIPFromDNSCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GeoSearch.StatisticsServiceReference.StatisticsService.BegingetServerInfoFromURLS(System.Collections.ObjectModel.ObservableCollection<string> URLList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetServerInfoFromURLS(URLList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> GeoSearch.StatisticsServiceReference.StatisticsService.EndgetServerInfoFromURLS(System.IAsyncResult result) {
            return base.Channel.EndgetServerInfoFromURLS(result);
        }
        
        private System.IAsyncResult OnBegingetServerInfoFromURLS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> URLList = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).BegingetServerInfoFromURLS(URLList, callback, asyncState);
        }
        
        private object[] OnEndgetServerInfoFromURLS(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> retVal = ((GeoSearch.StatisticsServiceReference.StatisticsService)(this)).EndgetServerInfoFromURLS(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetServerInfoFromURLSCompleted(object state) {
            if ((this.getServerInfoFromURLSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServerInfoFromURLSCompleted(this, new getServerInfoFromURLSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServerInfoFromURLSAsync(System.Collections.ObjectModel.ObservableCollection<string> URLList) {
            this.getServerInfoFromURLSAsync(URLList, null);
        }
        
        public void getServerInfoFromURLSAsync(System.Collections.ObjectModel.ObservableCollection<string> URLList, object userState) {
            if ((this.onBegingetServerInfoFromURLSDelegate == null)) {
                this.onBegingetServerInfoFromURLSDelegate = new BeginOperationDelegate(this.OnBegingetServerInfoFromURLS);
            }
            if ((this.onEndgetServerInfoFromURLSDelegate == null)) {
                this.onEndgetServerInfoFromURLSDelegate = new EndOperationDelegate(this.OnEndgetServerInfoFromURLS);
            }
            if ((this.ongetServerInfoFromURLSCompletedDelegate == null)) {
                this.ongetServerInfoFromURLSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServerInfoFromURLSCompleted);
            }
            base.InvokeAsync(this.onBegingetServerInfoFromURLSDelegate, new object[] {
                        URLList}, this.onEndgetServerInfoFromURLSDelegate, this.ongetServerInfoFromURLSCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GeoSearch.StatisticsServiceReference.StatisticsService CreateChannel() {
            return new StatisticsServiceClientChannel(this);
        }
        
        private class StatisticsServiceClientChannel : ChannelBase<GeoSearch.StatisticsServiceReference.StatisticsService>, GeoSearch.StatisticsServiceReference.StatisticsService {
            
            public StatisticsServiceClientChannel(System.ServiceModel.ClientBase<GeoSearch.StatisticsServiceReference.StatisticsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetVisitIPAddress(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getVisitIPAddress", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetVisitIPAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getVisitIPAddress", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetLocationFromIP(string ip, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ip;
                System.IAsyncResult _result = base.BeginInvoke("getLocationFromIP", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetLocationFromIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getLocationFromIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetIPFromDNS(string domain, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = domain;
                System.IAsyncResult _result = base.BeginInvoke("getIPFromDNS", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetIPFromDNS(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getIPFromDNS", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetServerInfoFromURLS(System.Collections.ObjectModel.ObservableCollection<string> URLList, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = URLList;
                System.IAsyncResult _result = base.BeginInvoke("getServerInfoFromURLS", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> EndgetServerInfoFromURLS(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<GeoSearch.StatisticsServiceReference.ServerInfo>)(base.EndInvoke("getServerInfoFromURLS", _args, result)));
                return _result;
            }
        }
    }
}
